package asistentePOO;

import javax.swing.JFrame;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;
import javax.swing.JList;
import javax.swing.JRadioButton;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

import com.toedter.calendar.JCalendar;

import javax.swing.JScrollPane;
import javax.swing.JSpinner;

public class MainAsistente {

	private JFrame frame;
	private JTextField nombreUsuarioNuevo;
	public static JLabel nombreUsuarioActivo = new JLabel("");

	public static List<Object> usuariosLista = new ArrayList<Object>();
	public static Usuario usuarioActual;
	private Usuario usuarioBorrar;

	static JList<String> usuariosNombresLista = new JList<String>();
	static DefaultListModel<String> usuariosNombresListaDefault = new DefaultListModel<String>();

	static JList<String> agendaEventosLista = new JList<String>();
	static DefaultListModel<String> agendaEventosListaDefault = new DefaultListModel<String>();

	static JList<String> feedLista = new JList<String>();
	static DefaultListModel<String> feedListaDefault = new DefaultListModel<String>();

	private JRadioButton estadoUsuario = new JRadioButton("OCUPADO");
	
	private static JRadioButton feedDeporte = new JRadioButton("DEPORTE");
	private static JRadioButton feedTecnologia = new JRadioButton("TECNOLOGIA");
	private static JRadioButton feedNacional = new JRadioButton("NACIONAL");
	private static JRadioButton feedInternacional = new JRadioButton("INTERNACIONAL");
	private static JRadioButton feedComida = new JRadioButton("COMIDA");
	private static JRadioButton feedModa = new JRadioButton("MODA");                       //Seleccion interes Moda
	public static List<JRadioButton> intereses = Arrays.asList(feedDeporte, feedTecnologia, feedNacional, feedInternacional, feedComida, feedModa);
	private JTextField nombreEventoNuevo;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MainAsistente window = new MainAsistente();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public MainAsistente() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		
		Timer FeedTimer = new Timer();                                                   //Creacion del timer para el feed
		FeedTimer.schedule(new FeedTimer(), 0, 5000); 							         //Creacion de los parametros del timer
		
		Timer EventosTimer = new Timer();                                                //Creacion del timer para el feed
		EventosTimer.schedule(new EventosTimer(), 0, 1000); 							 //Creacion de los parametros del timer
		
		frame = new JFrame();
		frame.setBounds(100, 100, 878, 329);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		//Spiner para la hora
		
		JSpinner eleccionHora = new JSpinner(new SpinnerDateModel(new Date(1523242800653L), null, null, Calendar.HOUR_OF_DAY));
		JSpinner.DateEditor de = new JSpinner.DateEditor(eleccionHora, "HH:mm");
		eleccionHora.setEditor(de);
		eleccionHora.setBounds(323, 226, 51, 20);
		frame.getContentPane().add(eleccionHora);
		
		//Recuadro para introduccion de nombre
		
		nombreUsuarioNuevo = new JTextField();
		nombreUsuarioNuevo.setBounds(10, 226, 188, 20);
		frame.getContentPane().add(nombreUsuarioNuevo);
		nombreUsuarioNuevo.setColumns(10);
		
		//Boton de agregar usuario

		JButton agregarUsuarioNuevo = new JButton("AGREGAR");                        //al precionar el boton de agregar usuario
		agregarUsuarioNuevo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (nombreUsuarioNuevo.getText().trim().length() > 0) {              //revisamos que no sean solo espacios en blanco
					Usuario nuevoUsuario = new Usuario(nombreUsuarioNuevo.getText());                            // creo un nuevo usuario
					usuariosLista.add(nuevoUsuario);                                 // agrego el nuevo usuario a la lista de usuarios
					
					usuariosNombresListaDefault.addElement(nuevoUsuario.getNombre());     // agregar el nombre del nuevo usuario a la lista defoult
					usuariosNombresLista.setModel(usuariosNombresListaDefault);      // seteamos el modeo de la lista visible a la lista defailt

					nombreUsuarioNuevo.setText("");                                  // eliminamos el texto del recuadro

				}
			}
		});
		agregarUsuarioNuevo.setBounds(10, 257, 89, 23);
		frame.getContentPane().add(agregarUsuarioNuevo);
		
		//Boton de elejir usuario
		
		JButton aceptarUsuario = new JButton("ACEPTAR");
		aceptarUsuario.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int seleccionIndex = usuariosNombresLista.getSelectedIndex();     // obtenemos el index de la seleccion
				if (seleccionIndex >= 0) {
					estadoUsuario.setEnabled(true);

					usuarioActual = (Usuario) usuariosLista.get(seleccionIndex);        // seleccionamos y extraemos al usuario elejido
					nombreUsuarioActivo.setText(usuarioActual.getNombre());                  // seteamos el nombre del usuario activo

					agendaEventosListaDefault = new DefaultListModel<String>();   // reiniciamos la lista de eventos
					feedListaDefault = new DefaultListModel<String>();            // reiniciamos la lista de eventos
					agendaEventosLista.setModel(agendaEventosListaDefault);       // ponemos el modelo (copiamos de la defout a la que se muestra)
					feedLista.setModel(feedListaDefault);                         // ponemos el modelo (copiamos de la defout a la que se muestra)

					for (int i = 0; i < usuarioActual.agendaEventos.size(); i++) {             // revisamos todos los eventos que tiene el usuario en su lista personal
						Evento evento = usuarioActual.agendaEventos.get(i);           // extraemos el evento de la lista personal
						
						String fechaString  = new SimpleDateFormat("dd/MM/yyyy").format(evento.fechaHora);	
						String horaString  = new SimpleDateFormat("HH:mm").format(evento.fechaHora);	
						agendaEventosListaDefault.addElement("<html>" + evento.nombre + "<br>" + fechaString + " " + horaString + "</span></html>");
					}
					
					for (int i = 0; i < usuarioActual.feedDesoupado.size(); i++) {               // revisamos todos los feed que tiene el usuario en su lista feed
						feedListaDefault.addElement((String) usuarioActual.feedDesoupado.get(i));         // agregamos cada feed de la lista personal a la lista defoult
					}
					
					if(usuarioActual.estadoActual == EstadoUsuario.OCUPADO)
						estadoUsuario.setSelected(true);
					else
						estadoUsuario.setSelected(false);
					
					for (int i = 0; i < usuarioActual.intereses.length; i++) {           // revisamos todos los intereses del usuario
						intereses.get(i).setEnabled(true);
						if(usuarioActual.intereses[i] == 0)                          // si es que no tiene el interes i se deselecciona
							intereses.get(i).setSelected(false);
						else
							intereses.get(i).setSelected(true); // si es que se tiene el interes i se selecciona
					}
				}
			}
		});
		aceptarUsuario.setBounds(10, 192, 89, 23);
		frame.getContentPane().add(aceptarUsuario);
		
		//Boton de eliminar usuario

		JButton eliminarUsuario = new JButton("ELIMINAR");                       //al precionar el boton de eliminar usuario
		eliminarUsuario.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int seleccionIndex = usuariosNombresLista.getSelectedIndex();    // revisamos el index para que existe una seleccion
				if (seleccionIndex >= 0) {
					usuarioBorrar = (Usuario) usuariosLista.get(seleccionIndex);
					if(usuarioBorrar.equals(usuarioActual)) {
						estadoUsuario.setEnabled(false);
						estadoUsuario.setSelected(false);
					
						for (int i = 0; i < usuarioActual.intereses.length; i++) {           // revisamos todos los intereses del usuario
							intereses.get(i).setSelected(false);
							intereses.get(i).setEnabled(false);
						}
						
						nombreUsuarioActivo.setText("");                             // eliminnamos el nombre del usuario

						agendaEventosListaDefault = new DefaultListModel<String>();  // reniciamos la lista de eventos default
						feedListaDefault = new DefaultListModel<String>();           // reniciamos la lista de feed default
						agendaEventosLista.setModel(agendaEventosListaDefault);      // ponemos el modelo
						feedLista.setModel(feedListaDefault);                        // ponemos el modelo
						
					}
					
					usuariosNombresListaDefault.removeElementAt(seleccionIndex); // removimos el nombre de la lista defoult
					usuariosNombresLista.setModel(usuariosNombresListaDefault);   
					usuariosLista.remove(seleccionIndex);                        // removimos el usuario de la lista de usuarios
				}
			}
		});
		eliminarUsuario.setBounds(109, 192, 89, 23);
		frame.getContentPane().add(eliminarUsuario);
		
		//Boton de agregar evento de agenda

		JButton agregarEventoAgenda = new JButton("AGREGAR");
		agregarEventoAgenda.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (nombreUsuarioActivo.getText() != "") {
					if (nombreEventoNuevo.getText().trim().length() > 0) {            //revisamos que no sean solo espacios en blanco
						
						JCalendar fechaSeleccion = new JCalendar();
						String titulo = null;
						Object[] parametros = {titulo, fechaSeleccion};					
						Object[] opciones = {"AGENDAR", "CANCELAR"}; 
					
						int siOno = JOptionPane.showOptionDialog(frame, parametros, "FECHA", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, opciones, opciones[0]);
					
						if (siOno == JOptionPane.YES_OPTION) {
							String eventoNombre = nombreEventoNuevo.getText(); 
							nombreEventoNuevo.setText("");                                  // eliminamos el texto del recuadro																				
							
							SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
							String fechaString = sdf.format(((JCalendar)parametros[1]).getDate());
						    String horaString  = new SimpleDateFormat("HH:mm").format(eleccionHora.getValue());								    						    
							String[] fechaArray = fechaString.split("/");
							String[] horaArray = horaString.split(":");
							
							Calendar fechaHoraEvento = Calendar.getInstance();
							fechaHoraEvento.setTimeInMillis(0);
							fechaHoraEvento.set(Integer.parseInt(fechaArray[2]), Integer.parseInt(fechaArray[1]) - 1, Integer.parseInt(fechaArray[0]), Integer.parseInt(horaArray[0]), Integer.parseInt(horaArray[1]), 0);
							Date fechaHoraEventoDate = fechaHoraEvento.getTime();      
							
							if(fechaHoraEventoDate.after(new Date())) {
					        						
								Evento nuevoEvento = new Evento();                                              // creo un nuevo evento
								nuevoEvento.nombre = eventoNombre;                                              // le asigno el nombre al evento
								nuevoEvento.fechaHora = fechaHoraEventoDate;                                    // le asigno la fecha y horo al evento
							
								int ubicacion = 0;
								for(int i = 0; i < usuarioActual.agendaEventos.size(); i ++) {
									Evento comparacion = usuarioActual.agendaEventos.get(i);
									if(nuevoEvento.fechaHora.after(comparacion.fechaHora)) {
										ubicacion ++;
									}else
										break;
								}
							
								usuarioActual.agendaEventos.add(ubicacion, nuevoEvento);							
								agendaEventosListaDefault.add(ubicacion, "<html>" + nuevoEvento.nombre + "<br>" + fechaString + " " + horaString + "</span></html>");
								agendaEventosLista.setModel(agendaEventosListaDefault);                         //ponemos el modelo
							} 
						} 				
					}
				}
			}
		});
		agregarEventoAgenda.setBounds(384, 225, 127, 23);
		frame.getContentPane().add(agregarEventoAgenda);
		
		//Boton de eliminar evento de agenda

		JButton eliminarEventoAgenda = new JButton("ELIMINAR");
		eliminarEventoAgenda.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int seleccionIndex = agendaEventosLista.getSelectedIndex();      // se revisa si se tiene algun elemento de
																			     // la agenda selecionado
				if (seleccionIndex >= 0) {
					if(seleccionIndex == 0)
						if(usuarioActual.avisoEstado == AvisoUsuario.AVISADO) {	
							usuarioActual.avisoEstado = AvisoUsuario.NO_AVISADO;
							usuariosNombresListaDefault.set(usuariosLista.indexOf(usuarioActual), usuarioActual.getNombre());
							usuariosNombresLista.setModel(usuariosNombresListaDefault);          // seteamos el modeo de la lista visible a la lista defailt
						}
					
					usuarioActual.agendaEventos.remove(seleccionIndex);                 // lo agregamos a la lista de eventos del usuario
					agendaEventosListaDefault.removeElementAt(seleccionIndex);   // se elimina el elemento de la lista
					agendaEventosLista.setModel(agendaEventosListaDefault);      //ponemos el modelo

				}
			}
		});
		eliminarEventoAgenda.setBounds(323, 257, 188, 23);
		frame.getContentPane().add(eliminarEventoAgenda);
		estadoUsuario.setHorizontalAlignment(SwingConstants.LEFT);
		
		
		//Botones de seleccion de los gustos para el feed y estado
		
		estadoUsuario.setEnabled(false);
		estadoUsuario.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) { 
				if (nombreUsuarioActivo.getText() != "") {
					if(estadoUsuario.isSelected())                                     
						usuarioActual.estadoActual = EstadoUsuario.OCUPADO;                  
					else {
						usuarioActual.estadoActual = EstadoUsuario.DESOCUPADO;
						if(usuarioActual.feedOcupado.size() > 0){ 
							for(int i = 0 ; i < usuarioActual.feedOcupado.size() ; i++)
								feedListaDefault.addElement((String) usuarioActual.feedOcupado.get(i)); 
							usuarioActual.feedDesoupado.addAll(usuarioActual.feedOcupado);
							usuarioActual.feedOcupado = new ArrayList<String>();
							feedLista.setModel(feedListaDefault); 
						}
					}
				}
			}
		});
		estadoUsuario.setBounds(203, 111, 105, 23);
		frame.getContentPane().add(estadoUsuario);
		feedDeporte.setEnabled(false);

		feedDeporte.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) { 
				if (nombreUsuarioActivo.getText() != "") {
					if(feedDeporte.isSelected())                         //Se revisa si esta selecionado, si es asi se agrega el interes en la posicion 0
						usuarioActual.intereses[0] = 1;                  
					else
						usuarioActual.intereses[0] = 0; 				 //Caso contrario se le quita el interes en la posicion 0
					}
				}
		});
		feedDeporte.setBounds(715, 34, 127, 23);
		frame.getContentPane().add(feedDeporte);
		feedTecnologia.setEnabled(false);

		feedTecnologia.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) { 
				if (nombreUsuarioActivo.getText() != "") {
					if(feedTecnologia.isSelected())                      //Se revisa si esta selecionado, si es asi se agrega el interes en la posicion 1
						usuarioActual.intereses[1] = 1;                  
					else
						usuarioActual.intereses[1] = 0; 				 //Caso contrario se le quita el interes en la posicion 1
					}
				}
		});
		feedTecnologia.setBounds(715, 59, 127, 23);
		frame.getContentPane().add(feedTecnologia);
		feedNacional.setEnabled(false);

		feedNacional.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) { 
				if (nombreUsuarioActivo.getText() != "") {
					if(feedNacional.isSelected())                        //Se revisa si esta selecionado, si es asi se agrega el interes en la posicion 2 
						usuarioActual.intereses[2] = 1;                  
					else
						usuarioActual.intereses[2] = 0; 				 //Caso contrario se le quita el interes en la posicion 2
					}
				}
		});
		feedNacional.setBounds(715, 85, 127, 23);
		frame.getContentPane().add(feedNacional);
		feedInternacional.setEnabled(false);

		feedInternacional.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) { 
				if (nombreUsuarioActivo.getText() != "") {
					if(feedInternacional.isSelected())                   //Se revisa si esta selecionado, si es asi se agrega el interes en la posicion 3
						usuarioActual.intereses[3] = 1;                  
					else
						usuarioActual.intereses[3] = 0; 				 //Caso contrario se le quita el interes en la posicion 3
					}
				}
		});
		feedInternacional.setBounds(715, 111, 127, 23);
		frame.getContentPane().add(feedInternacional);
		feedComida.setEnabled(false);

		feedComida.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) { 
				if (nombreUsuarioActivo.getText() != "") {
					if(feedComida.isSelected())                          //Se revisa si esta selecionado, si es asi se agrega el interes en la posicion 4
						usuarioActual.intereses[4] = 1;                  
					else
						usuarioActual.intereses[4] = 1; 				 //Caso contrario se le quita el interes en la posicion 4
					}
				}
		});
		feedComida.setBounds(715, 137, 127, 23);
		frame.getContentPane().add(feedComida);
		feedModa.setEnabled(false);

		feedModa.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) { 
				if (nombreUsuarioActivo.getText() != "") {
					if(feedModa.isSelected())                            //Se revisa si esta selecionado, si es asi se agrega el interes en la posicion 5
						usuarioActual.intereses[5] = 1;                  
					else
						usuarioActual.intereses[5] = 1; 				 //Caso contrario se le quita el interes en la posicion 5
					}
				}
		});
		feedModa.setBounds(715, 162, 127, 23);
		frame.getContentPane().add(feedModa);
		
		
		//Lables
		
		JLabel tituloUsuarios = new JLabel("USUARIOS");
		tituloUsuarios.setHorizontalAlignment(SwingConstants.CENTER);
		tituloUsuarios.setBounds(10, 12, 188, 14);
		frame.getContentPane().add(tituloUsuarios);
		
		JLabel tituloEstado = new JLabel("ESTADO");
		tituloEstado.setHorizontalAlignment(SwingConstants.LEFT);
		tituloEstado.setBounds(208, 85, 105, 23);
		frame.getContentPane().add(tituloEstado);

		JLabel tituloFeed = new JLabel("FEED");
		tituloFeed.setHorizontalAlignment(SwingConstants.CENTER);
		tituloFeed.setBounds(521, 12, 188, 14);
		frame.getContentPane().add(tituloFeed);

		JLabel tituloAgenda = new JLabel("AGENDA");
		tituloAgenda.setHorizontalAlignment(SwingConstants.CENTER);
		tituloAgenda.setBounds(323, 12, 188, 14);
		frame.getContentPane().add(tituloAgenda);

		JLabel tituloUsuarioActivo = new JLabel("USUARIO ACTIVO");
		tituloUsuarioActivo.setHorizontalAlignment(SwingConstants.LEFT);
		tituloUsuarioActivo.setBounds(208, 26, 105, 23);
		frame.getContentPane().add(tituloUsuarioActivo);
		nombreUsuarioActivo.setHorizontalAlignment(SwingConstants.LEFT);

		nombreUsuarioActivo.setBounds(208, 48, 105, 23);
		frame.getContentPane().add(nombreUsuarioActivo);
	
		
        //Paneles de scroll
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(323, 28, 188, 153);
		frame.getContentPane().add(scrollPane);
		scrollPane.setViewportView(agendaEventosLista);

		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBounds(10, 28, 188, 153);
		frame.getContentPane().add(scrollPane_1);
		scrollPane_1.setViewportView(usuariosNombresLista);

		JScrollPane scrollPane_2 = new JScrollPane();
		scrollPane_2.setBounds(521, 28, 188, 252);
		frame.getContentPane().add(scrollPane_2);
		scrollPane_2.setViewportView(feedLista);
		
		nombreEventoNuevo = new JTextField();
		nombreEventoNuevo.setColumns(10);
		nombreEventoNuevo.setBounds(323, 193, 188, 20);
		frame.getContentPane().add(nombreEventoNuevo);
		
		
	}
	
}